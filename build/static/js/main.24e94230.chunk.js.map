{"version":3,"sources":["images/trial.png","fonts/commodore.woff","reducer.js","common/utils.js","components/CRTContainer.js","common/styles.js","components/Header.js","components/Main.js","common/RustyZ.js","components/ZMachineConnector.js","components/KeyboardInput.js","components/FontFix.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ADD_TO_MAIN_DISPLAY","DELETE_LAST_CHARACTER","INPUT_TO_DISPLAY","FOCUS_INPUT","SET_LEFT_DISPLAY","SET_RIGHT_DISPLAY","REFRESH_DISPLAY","defaultState","main","left","right","inputting","inputting_at","rootReducer","combineReducers","display","state","action","type","add","payload","message","length","slice","getDimensions","width","window","innerWidth","height","innerHeight","CRTFilterContainer","withFilters","Container","CRTFilter","CRTContainer","props","effects","time","vignettingAlpha","noise","noiseSize","seed","Math","random","lineWidth","lineContrast","animating","getCRTEffects","useState","setTime","cb","useRef","useEffect","current","requestAnimationFrame","draw","_","t","cancelAnimationFrame","useFrameTime","BrightGreen","BrightGreenText","TextStyle","fill","fontFamily","fontSize","ScreenBlack","HeaderText","clone","connect","size","x","y","leftDim","anchor","getLeftDimensions","rightDim","getRightDimensions","g","color","position","beginFill","drawRect","endFill","drawTop","text","style","drawScreen","MainText","pos","getTextDimensions","mask","wordWrap","wordWrapWidth","ref","ZMachineConnector","initialized","setInitialized","setLeftDisplay","setRightDisplay","addToMainDisplay","focusInput","Observable","subscriber","RustyZ","subscribe","output","next","source","content","propTypes","mapDispatchToProps","KeyboardInput","inputToDisplay","deleteLastCharacter","input","setInput","update","handleInput","e","key","String","fromCharCode","keyCode","match","document","addEventListener","removeEventListener","FontFix","css","font","refreshDisplay","WebFont","load","active","custom","families","urls","PropTypes","string","store","createStore","getHeaderDimensions","font_size","App","dimensions","setDimensions","resizing","setResizing","debouncedResize","debounce","onResize","useDimensions","frame_size","getFrameDimensions","inner_size","getInnerFrame","header","getMainDimensions","stage_options","backgroundColor","options","image","frame","zIndex","Boolean","location","hostname","rootEle","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24e94230.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trial.b4dfe561.png\";","module.exports = __webpack_public_path__ + \"static/media/commodore.252e74d8.woff\";","// @flow\n\nimport { combineReducers } from \"redux\";\nimport type { Action } from \"./types.js\";\n\nexport const ADD_TO_MAIN_DISPLAY = \"DISPLAY.ADD_TO_MAIN_DISPLAY\";\nexport const DELETE_LAST_CHARACTER = \"DISPLAY.DELETE_LAST_CHARACTER\";\nexport const INPUT_TO_DISPLAY = \"DISPLAY.INPUT_TO_DISPLAY\";\nexport const FOCUS_INPUT = \"DISPLAY.FOCUS_INPUT\";\nexport const SET_LEFT_DISPLAY = \"DISPLAY.SET_LEFT_DISPLAY\";\nexport const SET_RIGHT_DISPLAY = \"DISPLAY.SET_RIGHT_DISPLAY\";\nexport const REFRESH_DISPLAY = \"DISPLAY.REFRESH\";\n\nexport type DisplayState = {\n  main: string,\n  left: string,\n  right: string,\n  inputting: boolean,\n  inputting_at: number\n};\n\nexport type DisplaySlice = {\n  display: DisplayState\n};\n\ntype DisplayUpdate = {\n  message: string\n};\n\nexport function addToMainDisplay(main: string) {\n  return {\n    type: ADD_TO_MAIN_DISPLAY,\n    payload: { message: main }\n  };\n}\n\nexport function deleteLastCharacter() {\n  return {\n    type: DELETE_LAST_CHARACTER,\n    payload: { message: \"\" }\n  };\n}\n\nexport function inputToDisplay(input: string) {\n  return {\n    type: INPUT_TO_DISPLAY,\n    payload: { message: input }\n  };\n}\n\nexport function focusInput() {\n  return {\n    type: FOCUS_INPUT,\n    payload: { message: \"focus\" }\n  };\n}\n\nexport function refreshDisplay() {\n  return {\n    type: REFRESH_DISPLAY,\n    payload: { message: \"refresh\" }\n  };\n}\n\nexport function setLeftDisplay(left: string) {\n  return {\n    type: SET_LEFT_DISPLAY,\n    payload: { message: left }\n  };\n}\n\nexport function setRightDisplay(right: string) {\n  return {\n    type: SET_RIGHT_DISPLAY,\n    payload: { message: right }\n  };\n}\n\nconst defaultState: DisplayState = {\n  main: \"\",\n  left: \"Loading..\",\n  right: \"\",\n  inputting: false,\n  inputting_at: 0\n};\n\nexport function displayReducer(\n  state: DisplayState = defaultState,\n  action: Action<DisplayUpdate>\n): DisplayState {\n  switch (action.type) {\n    case ADD_TO_MAIN_DISPLAY: {\n      let { message: add } = action.payload;\n      let { main } = state;\n      main += add;\n      return { ...state, main, inputting: false };\n    }\n\n    case INPUT_TO_DISPLAY: {\n      let { message: add } = action.payload;\n      let { main } = state;\n      main += add;\n      return { ...state, main };\n    }\n\n    case DELETE_LAST_CHARACTER: {\n      let { main, inputting_at } = state;\n\n      if (main.length > inputting_at) {\n        main = main.slice(0, -1);\n      }\n\n      return { ...state, main };\n    }\n\n    case FOCUS_INPUT:\n      let { inputting } = state;\n\n      if (inputting) return state;\n\n      let inputting_at = state.main.length;\n      return { ...state, inputting_at, inputting: true };\n\n    case REFRESH_DISPLAY: {\n      let { left, right, main } = state;\n\n      // this is kind of a hack, but basically\n      // pixi js will only make graphics calls when props\n      // change, there's no \"refresh\" call. if the draw\n      // call happens before the font is loaded,\n      // it will be blank, so refresh_display \"refreshes\"\n      // the display by adding characters where they wont\n      // be noticed - left of the left header, right of the right\n      // header, and at the beginning of the main input (since the\n      // text input is bottom anchored, the text will not shift)\n\n      left += \" \";\n      right = \" \" + right;\n      main = \" \" + main;\n\n      return { ...state, left, right, main };\n    }\n\n    case SET_LEFT_DISPLAY:\n      let { message: left } = action.payload;\n      return { ...state, left };\n\n    case SET_RIGHT_DISPLAY:\n      let { message: right } = action.payload;\n      return { ...state, right };\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  display: displayReducer\n});\n","// @flow\nimport type { Dimensions } from \"./types.js\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// import {useApp} from \"@inlet/react-pixi\";\nimport { debounce } from \"underscore\";\n\nfunction getDimensions(): Dimensions {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\n\nexport function useDimensions(): Dimensions {\n  const [dimensions, setDimensions] = useState(getDimensions());\n  const [resizing, setResizing] = useState(false);\n\n  useEffect(() => {\n    let debouncedResize = () => {\n      let dimensions = getDimensions();\n      setDimensions(dimensions);\n      setResizing(false);\n    };\n\n    debouncedResize = debounce(debouncedResize, 250);\n    window.addEventListener(\"resize\", debouncedResize);\n\n    let onResize = () => {\n      setResizing(true);\n    };\n    window.addEventListener(\"resize\", onResize);\n\n    return () => {\n      window.removeEventListener(onResize);\n      window.removeEventListener(debouncedResize);\n    };\n  }, []);\n\n  return [dimensions, resizing];\n}\n\nexport function useFrameTime() {\n  let [time, setTime] = useState(0);\n\n  let cb = useRef(0);\n\n  useEffect(() => {\n    let draw = _ => {\n      setTime(t => t + 1);\n      cb.current = window.requestAnimationFrame(draw);\n    };\n\n    cb.current = window.requestAnimationFrame(draw);\n\n    return () => {\n      window.cancelAnimationFrame(cb.current);\n    };\n  }, []);\n\n  return time;\n}\n","import React from \"react\";\nimport { Container, withFilters } from \"@inlet/react-pixi\";\nimport { CRTFilter } from \"pixi-filters\";\n\nimport { useFrameTime } from \"../common/utils.js\";\n\nfunction getCRTEffects(time: number) {\n  return {\n    vignettingAlpha: 0.7,\n    noise: 0.1,\n    noiseSize: 3.3,\n    seed: Math.random(),\n    time: time,\n    lineWidth: 5,\n    lineContrast: 0.05,\n    animating: true\n  };\n}\n\nconst CRTFilterContainer = withFilters(Container, [CRTFilter]);\n\nexport default function CRTContainer(props) {\n  let time = useFrameTime() / 2.71;\n  let effects = getCRTEffects(time);\n\n  return <CRTFilterContainer {...effects} {...props} />;\n}\n","import { TextStyle } from \"pixi.js\";\n\nexport const BrightGreen = 0x30ff5d;\n\nexport const BrightGreenText = new TextStyle({\n  fill: BrightGreen,\n  fontFamily: \"Commodore\",\n  fontSize: 24\n});\n\nexport const ScreenBlack = 0x272727;\n","// @flow\nimport type { ObjectPosition, Rectangle } from \"./types.js\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\n\nimport { Container, Graphics, Text } from \"@inlet/react-pixi\";\n\nimport { BrightGreen, BrightGreenText } from \"../common/styles.js\";\n\nfunction getLeftDimensions(size: Rectangle): ObjectPosition {\n  let { x, y } = size;\n\n  return {\n    x: x,\n    y: y,\n    anchor: [0, 0]\n  };\n}\n\nfunction getRightDimensions(size: Rectangle): ObjectPosition {\n  let { width, x, y } = size;\n\n  return {\n    x: x + width,\n    y: y,\n    anchor: [1, 0]\n  };\n}\n\ntype DisplayProps = {|\n  left?: string,\n  right?: string\n|};\n\ntype HeaderProps = Rectangle & DisplayProps;\nconst HeaderText = BrightGreenText.clone();\nHeaderText.fill = 0x000000;\n\n// \"g\" is the PIXI.Graphics object, which is kind of a light weight wrapper\n// around GL (hence clear/drawRect/beginFill) - i'm not going to type\n// it because that would be a nightmare\n//\n// as it turns out, one hitch I don't like about this library is that when\n// you ask TextStyle for colors, it will give you a hex string; the GL\n// API expects literal hex values only, hence why I'm using them and exporting\n// them directly\n\nfunction drawTop(g, color, position: Rectangle) {\n  g.beginFill(color, 1);\n  let { x, y, width, height } = position;\n  g.drawRect(x, y, width, height);\n  g.endFill();\n}\n\nfunction Header(props: HeaderProps) {\n  const { left, right, x, y, height, width } = props;\n\n  let size = { x, y, height, width };\n\n  const leftDim = getLeftDimensions(size);\n  const rightDim = getRightDimensions(size);\n\n  return (\n    <Container {...size}>\n      <Graphics draw={g => drawTop(g, BrightGreen, size)} />\n      <Text {...leftDim} text={left} style={HeaderText} />\n      <Text {...rightDim} text={right} style={HeaderText} />\n    </Container>\n  );\n}\n\nHeader.propTypes = {\n  left: PropTypes.string,\n  right: PropTypes.string,\n\n  height: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number\n};\n\nfunction mapStateToProps({ display }): DisplayProps {\n  let { left, right } = display;\n  return { left, right };\n}\n\nexport default connect(mapStateToProps)(Header);\n","// @flow\nimport type { ObjectPosition, Rectangle } from \"./types.js\";\n\nimport React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\nimport { Container, Graphics, Text } from \"@inlet/react-pixi\";\n\nimport { ScreenBlack, BrightGreenText } from \"../common/styles.js\";\n\n// main display, not main class\ntype MainProps = Rectangle & {\n  main?: string\n};\n\nfunction getTextDimensions(size: Rectangle): ObjectPosition {\n  let { height, x, y } = size;\n\n  return {\n    x: x,\n    y: y + height,\n    anchor: [0, 1]\n  };\n}\n\ntype DisplayProps = {\n  main?: string\n};\n\nfunction drawScreen(g, color, position: Rectangle) {\n  g.beginFill(color, 1);\n  let { x, y, width, height } = position;\n  g.drawRect(x, y, width, height);\n  g.endFill();\n}\n\nconst MainText = BrightGreenText.clone();\n\nexport function Main(props: MainProps) {\n  const { main, x, y, height, width } = props;\n  const size = { x, y, height, width };\n  const pos = getTextDimensions(size);\n  const mask = useRef();\n\n  MainText.wordWrap = true;\n  MainText.wordWrapWidth = width;\n\n  return (\n    <Container {...size}>\n      <Graphics\n        draw={g => drawScreen(g, ScreenBlack, { x, y, height, width })}\n      />\n      <Graphics\n        draw={g => drawScreen(g, ScreenBlack, { x, y, height, width })}\n        ref={mask}\n      />\n      <Text {...pos} style={MainText} text={main} mask={mask.current} />\n    </Container>\n  );\n}\n\nMain.propTypes = {\n  main: PropTypes.string,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number\n};\n\nfunction mapStateToProps({ display }): DisplayProps {\n  let { main } = display;\n  return { main };\n}\n\nexport default connect(mapStateToProps)(Main);\n","/*\n * stdweb doesn't really have a good story/method for deploying es6 modules or\n * exporting rich JS objects; the only really good way to expose an object\n * with functions or callbacks is on the window... which isn't great.\n *\n * This is because stdweb doesn't have an \"export object\" macro, and the\n * only way that i've found to actually call javascript\n * callbacks is to create  JS object using the js!{} macro and then call that selfsame\n * object using the same macro... which means I need to be able to reference it from another scope,\n * which means it has to be on the window (for now).\n *\n * Parcel integration/support for modules is ongoing but there's still a lot of work\n * that needs to be done to make it worthwhile.\n *\n * Additionally, there might be something on the window always regardless;\n * the setup of RustyZ uses a JS callback for state updates and I'm not sure\n * if it will ever be technically feasible to call a javascript function from\n * WASM. (I have to look into this)\n *\n * export_js! exists but it requires that everything you return have a static lifetime or\n * be Copy - this means any callbacks you return must also be static, which means they\n * can't be part of structs, or refer to structs. it's good for static functions,\n * but can't be used to explose closures that contain objects with non-static lifetimes\n */\n\ndeclare var RustyZ;\nexport default window.RustyZ;\n","// @flow\n\nimport { useState } from \"react\";\nimport { Observable } from \"rxjs\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setLeftDisplay,\n  setRightDisplay,\n  addToMainDisplay,\n  focusInput\n} from \"../reducer.js\";\n\nimport RustyZ from \"../common/RustyZ.js\";\n\n// trying to deliberately do this without redux-observables\n\ntype ConnectorProps = {\n  setLeftDisplay: string => void,\n  setRightDisplay: string => void,\n  addToMainDisplay: string => void,\n  focusInput: () => void\n};\n\nexport function ZMachineConnector(props: ConnectorProps) {\n  const [initialized, setInitialized] = useState(false);\n  let { setLeftDisplay, setRightDisplay, addToMainDisplay, focusInput } = props;\n\n  // i'm pretty sure this is very similar to use effect, but i want to be sure\n  // that it's fired only once\n  if (!initialized) {\n    const observer = new Observable(subscriber => {\n      RustyZ.subscribe(output => {\n        subscriber.next(output);\n      });\n    });\n\n    observer.subscribe(x => {\n      switch (x.source) {\n        case \"left\":\n          setLeftDisplay(x.content);\n          break;\n        case \"right\":\n          setRightDisplay(x.content);\n          break;\n        case \"main\":\n          addToMainDisplay(x.content);\n          break;\n        case \"input\":\n          focusInput();\n          break;\n        default:\n          break;\n      }\n    });\n\n    setInitialized(true);\n  }\n\n  return null;\n}\n\nZMachineConnector.propTypes = {};\n\nconst mapDispatchToProps = {\n  setLeftDisplay,\n  setRightDisplay,\n  addToMainDisplay,\n  focusInput\n};\n\nexport default connect(null, mapDispatchToProps)(ZMachineConnector);\n","// @flow\nimport type { DisplaySlice } from \"./reducer.js\";\n\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { inputToDisplay, deleteLastCharacter } from \"../reducer.js\";\n\nimport RustyZ from \"../common/RustyZ.js\";\n\ntype KeyboardProps = {\n  inputToDisplay: string => void,\n  deleteLastCharacter: () => void,\n  inputting: boolean,\n  main: string\n};\n\nexport function KeyboardInput(props: KeyboardProps) {\n  let { inputToDisplay, deleteLastCharacter } = props;\n\n  let [input, setInput] = useState(\"\");\n\n  let { update } = RustyZ;\n\n  useEffect(() => {\n    let handleInput = (e: KeyboardEvent) => {\n      if (e.key === \"Backspace\" || e.key === \"Delete\") {\n        deleteLastCharacter();\n\n        if (input.length > 0) {\n          setInput(input.slice(0, -1));\n        }\n\n        return;\n      }\n\n      if (e.key === \"Enter\") {\n        inputToDisplay(\"\\n\");\n        update(input);\n        setInput(\"\");\n        return;\n      }\n\n      // sometimes, stack overflow does have a very nice solution\n      // this matches the keycode against word/string characters\n      // and only outputs to string if it is a visible char\n      //\n      // we can't use \"key\" here because they are all strings,\n      // but we can get the literal string and match the escaped\n      // chars against a regex. that would have taken me a while to think\n      // of\n      if (String.fromCharCode(e.keyCode).match(/(\\w|\\s)/g)) {\n        inputToDisplay(e.key);\n        setInput(input + e.key);\n        return;\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleInput);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleInput);\n    };\n  });\n  return null;\n}\n\nKeyboardInput.propTypes = {};\n\nconst mapStateToProps = (state: DisplaySlice) => {\n  let {\n    display: { main, inputting }\n  } = state;\n  return { main, inputting };\n};\n\nconst mapDispatchToProps = {\n  inputToDisplay,\n  deleteLastCharacter\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KeyboardInput);\n","// @flow\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { refreshDisplay } from \"../reducer.js\";\n\nimport { connect } from \"react-redux\";\n\nimport WebFont from \"webfontloader\";\n\ntype FontFixProps = {\n  font: string,\n  css: string,\n  refreshDisplay: () => void\n};\n\n// So the font doesn't load before the canvas renders unless cached, we\n// need to make sure the font loads before rendering the canvas.\nfunction FontFix(props: FontFixProps) {\n  const { css, font, refreshDisplay } = props;\n  const [initialized, setInitialized] = useState(false);\n\n  if (!initialized) {\n    WebFont.load({\n      active: () => {\n        refreshDisplay();\n      },\n      custom: {\n        families: [font],\n        urls: [css]\n      }\n    });\n\n    setInitialized(true);\n  }\n\n  return null;\n}\n\nFontFix.propTypes = {\n  font: PropTypes.string,\n  css: PropTypes.string\n};\n\nconst mapDispatchToProps = {\n  refreshDisplay\n};\n\nexport default connect(null, mapDispatchToProps)(FontFix);\n","// @flow\nimport type { Dimensions, Rectangle } from \"./types.js\";\n\nimport React from \"react\";\nimport { Stage, Sprite } from \"@inlet/react-pixi\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./reducer.js\";\n\nimport CRTFilterContainer from \"./components/CRTContainer.js\";\nimport Header from \"./components/Header.js\";\nimport Main from \"./components/Main.js\";\nimport ZMachineConnector from \"./components/ZMachineConnector.js\";\nimport KeyboardInput from \"./components/KeyboardInput.js\";\nimport FontFix from \"./components/FontFix.js\";\n\nimport { useDimensions } from \"./common/utils.js\";\n\n// unfortunately, firefox does not support SVGs on canvas\n// unless they have explicit w/h set in the meta-attributes\n//\n// additionally it renders exactly like a PNG, anyway.\n\nimport frame from \"./images/trial.png\";\nimport \"./fonts/commodore.woff\";\nimport \"./App.css\";\n\nconst store = createStore(rootReducer);\n\nfunction getFrameDimensions(size: Dimensions): Rectangle {\n  let { width, height } = size;\n  return { width, height, x: 0, y: 0 };\n}\n\nfunction getHeaderDimensions(size: Rectangle): Rectangle {\n  const { width, x, y } = size;\n\n  // 26px is the default text size,\n  //\n  // Unlike web browsers, games and graphics engines have a strict 1-1 relationship\n  // between \"text size\" and area taken by the font including top padding.\n  //\n  // In other words, game engines don't consider \"bottom padding\" to be part of the line.\n  //\n  // So web browsers: text size is size from baseline to topline of capital letters,\n  // this is what designers like.\n  //\n  // Games: text size is size from baseline to \"top of line\", including spacing,\n  // such that if there were another text line above it, it would be the distance\n  // between baselines. This is what developers like.\n\n  let font_size = 26;\n  let top_padding = 4;\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: font_size + top_padding\n  };\n}\n\n// this is highly dependent on the image we are using and there's\n// no real way to autocalculate it; we scale based on expected aspect\n// ratio and image w/h\n//  right now:\n//\n//  tv frame width: 773px\n//  tv frame height: 543px\n//\n//  this is roughly 10:7 aspect ratio\nfunction getInnerFrame(size): Rectangle {\n  let { width, height } = size;\n\n  // these values are pulled from the image utility used to create the frame\n  // we scale the offsets based on the ratio and pray its close\n  return {\n    x: 44 * (width / 773.0),\n    y: 43 * (height / 543.0),\n    width: 450 * (width / 773.0),\n    height: 310 * (height / 543.0)\n  };\n}\n\nfunction getMainDimensions(size: Rectangle): Rectangle {\n  const { width, height, x, y } = size;\n\n  let { height: header_height } = getHeaderDimensions(size);\n\n  return {\n    x: x,\n    y: y + header_height / 2,\n    height: height,\n    width: width\n  };\n}\n\nfunction getStageOptions() {\n  return {\n    // PixiJS is kinda interesting, it doesn't\n    // take strings for color values, it only takes\n    // literal hex values. Probably the only time\n    // I've seen that in Js.\n    backgroundColor: 0x000000\n  };\n}\n\nfunction App() {\n  const [size, resizing] = useDimensions();\n\n  let frame_size = getFrameDimensions(size);\n  let inner_size = getInnerFrame(frame_size);\n\n  let { x, y, width, height } = getHeaderDimensions(inner_size);\n  const header = { x, y, width, height };\n\n  ({ x, y, width, height } = getMainDimensions(inner_size));\n  const main = { x, y, width, height };\n\n  let stage_options = getStageOptions();\n\n  // Stage is strange in that it accepts an object\n  // in \"options\", but doesn't expose all of those props\n  // to the component (but as far as I'm aware, it could)\n  return resizing ? null : (\n    <Stage {...size} options={stage_options}>\n      <Provider store={store}>\n        <Sprite\n          image={frame}\n          anchor={(0, 0)}\n          height={frame_size.height}\n          width={frame_size.width}\n          zIndex={2}\n        />\n        <CRTFilterContainer zIndex={1}>\n          <Header {...header}></Header>\n          <Main {...main}></Main>\n          <ZMachineConnector />\n          <KeyboardInput />\n          <FontFix css=\"./App.css\" font=\"Commodore\" />\n        </CRTFilterContainer>\n      </Provider>\n    </Stage>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootEle = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootEle);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}