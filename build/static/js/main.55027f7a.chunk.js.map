{"version":3,"sources":["images/monitor.svg","images/background.jpg","images/desklamp.svg","fonts/commodore.woff","reducer.js","common/utils.js","components/CRTContainer.js","common/styles.js","components/Header.js","components/Main.js","components/FontFix.js","common/RustyZ.js","components/KeyboardInput.js","components/ZMachineConnector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ADD_TO_MAIN_DISPLAY","DELETE_LAST_CHARACTER","INPUT_TO_DISPLAY","FOCUS_INPUT","SET_LEFT_DISPLAY","SET_RIGHT_DISPLAY","REFRESH_DISPLAY","defaultState","main","left","right","inputting","inputting_at","rootReducer","combineReducers","display","state","arguments","length","undefined","action","type","add","payload","message","Object","objectSpread2","slice","drawScreen","g","color","position","beginFill","x","y","width","height","drawRect","endFill","getDimensions","window","innerWidth","innerHeight","CRTFilterContainer","withFilters","Container","CRTFilter","CRTContainer","props","effects","time","vignettingAlpha","noise","noiseSize","seed","Math","random","lineWidth","lineContrast","animating","getCRTEffects","_useState5","useState","_useState6","slicedToArray","setTime","cb","useRef","useEffect","current","requestAnimationFrame","draw","_","t","cancelAnimationFrame","useFrameTime","react_default","a","createElement","assign","BrightGreen","BrightGreenText","TextStyle","fill","fontFamily","fontSize","ScreenBlack","DeadBlack","SeventiesBrown","HeaderText","clone","connect","_ref","size","header_bar","leftDim","anchor","rightDim","getRightDimensions","react_pixi_module","drawTop","text","style","MainText","main_area","pos","getTextDimensions","mask","wordWrap","wordWrapWidth","ref","FontFix","css","font","refreshDisplay","_useState","_useState2","initialized","setInitialized","WebFont","load","active","custom","families","urls","propTypes","PropTypes","string","mapDispatchToProps","KeyboardInput","inputToDisplay","deleteLastCharacter","update","RustyZ","input","setInput","handleInput","e","key","isDelete","isEnter","Boolean","String","fromCharCode","keyCode","match","isText","document","addEventListener","removeEventListener","_state$display","ZMachineConnector","setLeftDisplay","setRightDisplay","addToMainDisplay","focusInput","Observable","subscriber","subscribe","output","next","source","content","store","createStore","INNER_WIDTH","INNER_HEIGHT","OUTER_WIDTH","OUTER_HEIGHT","TABLE_SIZE","getFrameDimensions","diff","abs","min","getHeaderDimensions","font_size","App","_useDimensions","dimensions","setDimensions","_useState3","_useState4","resizing","setResizing","debouncedResize","debounce","onResize","useDimensions","_useDimensions2","frame_size","backdrop_size","totalHeight","monitorHeight","getBackdropDimensions","table_size","background","view","getTableSize","inner_size","scale","getLampDimensions","getInnerFrame","crt_black_size","frameWidth","frameHeight","getCRTBlackDimensions","_getHeaderDimensions2","header","_getMainDimensions","header_height","getMainDimensions","stage_options","backgroundColor","options","es","image","wood","zIndex","components_Header","components_Main","components_ZMachineConnector","components_KeyboardInput","components_FontFix","frame","location","hostname","rootEle","getElementById","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55027f7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/monitor.a4573174.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.73745505.jpg\";","module.exports = __webpack_public_path__ + \"static/media/desklamp.d4c74a2a.svg\";","module.exports = __webpack_public_path__ + \"static/media/commodore.252e74d8.woff\";","// @flow\n\nimport { combineReducers } from \"redux\";\nimport type { Action } from \"./common/types\";\n\nexport const ADD_TO_MAIN_DISPLAY = \"DISPLAY.ADD_TO_MAIN_DISPLAY\";\nexport const DELETE_LAST_CHARACTER = \"DISPLAY.DELETE_LAST_CHARACTER\";\nexport const INPUT_TO_DISPLAY = \"DISPLAY.INPUT_TO_DISPLAY\";\nexport const FOCUS_INPUT = \"DISPLAY.FOCUS_INPUT\";\nexport const SET_LEFT_DISPLAY = \"DISPLAY.SET_LEFT_DISPLAY\";\nexport const SET_RIGHT_DISPLAY = \"DISPLAY.SET_RIGHT_DISPLAY\";\nexport const REFRESH_DISPLAY = \"DISPLAY.REFRESH\";\n\nexport type DisplayState = {\n  main: string,\n  left: string,\n  right: string,\n  inputting: boolean,\n  inputting_at: number\n};\n\nexport type DisplaySlice = {\n  display: DisplayState\n};\n\ntype DisplayUpdate = {\n  message: string\n};\n\nexport function addToMainDisplay(main: string) {\n  return {\n    type: ADD_TO_MAIN_DISPLAY,\n    payload: { message: main }\n  };\n}\n\nexport function deleteLastCharacter() {\n  return {\n    type: DELETE_LAST_CHARACTER,\n    payload: { message: \"\" }\n  };\n}\n\nexport function inputToDisplay(input: string) {\n  return {\n    type: INPUT_TO_DISPLAY,\n    payload: { message: input }\n  };\n}\n\nexport function focusInput() {\n  return {\n    type: FOCUS_INPUT,\n    payload: { message: \"focus\" }\n  };\n}\n\nexport function refreshDisplay() {\n  return {\n    type: REFRESH_DISPLAY,\n    payload: { message: \"refresh\" }\n  };\n}\n\nexport function setLeftDisplay(left: string) {\n  return {\n    type: SET_LEFT_DISPLAY,\n    payload: { message: left }\n  };\n}\n\nexport function setRightDisplay(right: string) {\n  return {\n    type: SET_RIGHT_DISPLAY,\n    payload: { message: right }\n  };\n}\n\nconst defaultState: DisplayState = {\n  main: \"\",\n  left: \"Loading..\",\n  right: \"\",\n  inputting: false,\n  inputting_at: 0\n};\n\nexport function displayReducer(\n  state: DisplayState = defaultState,\n  action: Action<DisplayUpdate>\n): DisplayState {\n  switch (action.type) {\n    case ADD_TO_MAIN_DISPLAY: {\n      let { message: add } = action.payload;\n      let { main } = state;\n      main += add;\n      return { ...state, main, inputting: false };\n    }\n\n    case INPUT_TO_DISPLAY: {\n      let { message: add } = action.payload;\n      let { main } = state;\n      main += add;\n      return { ...state, main };\n    }\n\n    case DELETE_LAST_CHARACTER: {\n      let { main, inputting_at } = state;\n\n      if (main.length > inputting_at) {\n        main = main.slice(0, -1);\n      }\n\n      return { ...state, main };\n    }\n\n    case FOCUS_INPUT:\n      let { inputting } = state;\n\n      if (inputting) return state;\n\n      let inputting_at = state.main.length;\n      return { ...state, inputting_at, inputting: true };\n\n    case REFRESH_DISPLAY: {\n      let { left, right, main } = state;\n\n      // this is kind of a hack, but basically\n      // pixi js will only make graphics calls when props\n      // change, there's no \"refresh\" call. if the draw\n      // call happens before the font is loaded,\n      // it will be blank, so refresh_display \"refreshes\"\n      // the display by adding characters where they wont\n      // be noticed - left of the left header, right of the right\n      // header, and at the beginning of the main input (since the\n      // text input is bottom anchored, the text will not shift)\n\n      left += \" \";\n      right = \" \" + right;\n      main = \" \" + main;\n\n      return { ...state, left, right, main };\n    }\n\n    case SET_LEFT_DISPLAY:\n      let { message: left } = action.payload;\n      return { ...state, left };\n\n    case SET_RIGHT_DISPLAY:\n      let { message: right } = action.payload;\n      return { ...state, right };\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  display: displayReducer\n});\n","// @flow\nimport type { Dimensions } from \"./types\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// import {useApp} from \"@inlet/react-pixi\";\nimport { debounce } from \"underscore\";\n\nexport function drawScreen(g, color, position: Rectangle) {\n  g.beginFill(color, 1);\n  let { x, y, width, height } = position;\n  g.drawRect(x, y, width, height);\n  g.endFill();\n}\n\nexport function getDimensions(): Dimensions {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\n\nexport function isDelete(e: KeyboardEvent) {\n  return e.key === \"Backspace\" || e.key === \"Delete\";\n}\n\nexport function isEnter(e: KeyboardEvent) {\n  return e.key === \"Enter\";\n}\n\nexport function isText(e: KeyboardEvent) {\n  return Boolean(String.fromCharCode(e.keyCode).match(/(\\w|\\s)/g));\n}\n\nexport function useDimensions(): [Dimensions, boolean] {\n  const [dimensions, setDimensions] = useState(getDimensions());\n  const [resizing, setResizing] = useState(false);\n\n  useEffect(() => {\n    let debouncedResize = () => {\n      let dimensions = getDimensions();\n      setDimensions(dimensions);\n      setResizing(false);\n    };\n\n    debouncedResize = debounce(debouncedResize, 250);\n    window.addEventListener(\"resize\", debouncedResize);\n\n    let onResize = () => {\n      setResizing(true);\n    };\n\n    window.addEventListener(\"resize\", onResize);\n\n    return () => {\n      window.removeEventListener(onResize);\n      window.removeEventListener(debouncedResize);\n    };\n  }, []);\n\n  return [dimensions, resizing];\n}\n\nexport function useFrameTime() {\n  let [time, setTime] = useState(0);\n\n  let cb = useRef(0);\n\n  useEffect(() => {\n    let draw = _ => {\n      setTime(t => t + 1);\n      cb.current = window.requestAnimationFrame(draw);\n    };\n\n    cb.current = window.requestAnimationFrame(draw);\n\n    return () => {\n      window.cancelAnimationFrame(cb.current);\n    };\n  }, []);\n\n  return time;\n}\n","import React from \"react\";\nimport { Container, withFilters } from \"@inlet/react-pixi\";\nimport { CRTFilter } from \"pixi-filters\";\n\nimport { useFrameTime } from \"../common/utils\";\n\nfunction getCRTEffects(time: number) {\n  return {\n    vignettingAlpha: 0.4,\n    noise: 0.1,\n    noiseSize: 2.3,\n    seed: Math.random(),\n    time: time,\n    lineWidth: 6,\n    lineContrast: 0.03,\n    animating: true\n  };\n}\n\nconst CRTFilterContainer = withFilters(Container, [CRTFilter]);\n\nexport default function CRTContainer(props) {\n  let time = useFrameTime() / 2.71;\n  let effects = getCRTEffects(time);\n\n  return <CRTFilterContainer {...effects} {...props} />;\n}\n","import { TextStyle } from \"pixi.js\";\n\nexport const BrightGreen = 0x7c71da;\n\nexport const BrightGreenText = new TextStyle({\n  fill: BrightGreen,\n  fontFamily: \"Commodore\",\n  fontSize: 24\n});\n\nexport const ScreenBlack = 0x3e32a2;\nexport const DeadBlack = 0x272727;\nexport const SeventiesBrown = 0x643e29;\n","// @flow\nimport type { ObjectPosition, Rectangle } from \"../common/types\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\n\nimport { Container, Graphics, Text } from \"@inlet/react-pixi\";\n\nimport { BrightGreen, BrightGreenText } from \"../common/styles\";\n\nexport function getLeftDimensions(size: Rectangle): ObjectPosition {\n  return {\n    x: 0,\n    y: 0,\n    anchor: [0, 0]\n  };\n}\n\nexport function getRightDimensions(size: Rectangle): ObjectPosition {\n  let { width } = size;\n\n  return {\n    x: width,\n    y: 0,\n    anchor: [1, 0]\n  };\n}\n\ntype DisplayProps = {|\n  left?: string,\n  right?: string\n|};\n\ntype HeaderProps = Rectangle & DisplayProps;\nconst HeaderText = BrightGreenText.clone();\nHeaderText.fill = 0x000000;\n\n// \"g\" is the PIXI.Graphics object, which is kind of a light weight wrapper\n// around GL (hence clear/drawRect/beginFill) - i'm not going to type\n// it because that would be a nightmare\n//\n// as it turns out, one hitch I don't like about this library is that when\n// you ask TextStyle for colors, it will give you a hex string; the GL\n// API expects literal hex values only, hence why I'm using them and exporting\n// them directly\n\nfunction drawTop(g, color, position: Rectangle) {\n  g.beginFill(color, 1);\n  let { x, y, width, height } = position;\n  g.drawRect(x, y, width, height);\n  g.endFill();\n}\n\nfunction Header(props: HeaderProps) {\n  const { left, right, x, y, height, width } = props;\n\n  const size = { x, y, height, width };\n  const header_bar = { height, width }\n\n  const leftDim = getLeftDimensions(header_bar);\n  const rightDim = getRightDimensions(header_bar);\n\n  return (\n    <Container {...size}>\n      <Graphics draw={g => drawTop(g, BrightGreen, header_bar)} />\n      <Text {...leftDim} text={left} style={HeaderText} />\n      <Text {...rightDim} text={right} style={HeaderText} />\n    </Container>\n  );\n}\n\nHeader.propTypes = {\n  left: PropTypes.string,\n  right: PropTypes.string,\n\n  height: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number\n};\n\nfunction mapStateToProps({ display }): DisplayProps {\n  let { left, right } = display;\n  return { left, right };\n}\n\nexport default connect(mapStateToProps)(Header);\n","// @flow\nimport type { ObjectPosition, Rectangle } from \"../common/types\";\n\nimport React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\nimport { Container, Graphics, Text } from \"@inlet/react-pixi\";\n\nimport { ScreenBlack, BrightGreenText } from \"../common/styles\";\nimport { drawScreen } from \"../common/utils\";\n\n// main display, not main class\ntype MainProps = Rectangle & {\n  main?: string\n};\n\nexport function getTextDimensions(size: Rectangle): ObjectPosition {\n  let { height } = size;\n\n  return {\n    x: 0,\n    y: height,\n    anchor: [0, 1]\n  };\n}\n\ntype DisplayProps = {\n  main?: string\n};\n\nconst MainText = BrightGreenText.clone();\n\nexport function Main(props: MainProps) {\n  const { main, x, y, height, width } = props;\n  const size = { x, y, height, width };\n  const main_area = { height, width }\n\n  const pos = getTextDimensions(main_area);\n  const mask = useRef();\n\n  MainText.wordWrap = true;\n  MainText.wordWrapWidth = width;\n\n  return (\n    <Container {...size}>\n      <Graphics\n        draw={g => drawScreen(g, ScreenBlack, main_area)}\n      />\n      <Graphics\n        draw={g => drawScreen(g, ScreenBlack, main_area)}\n        ref={mask}\n      />\n      <Text {...pos} style={MainText} text={main} mask={mask.current} />\n    </Container>\n  );\n}\n\nMain.propTypes = {\n  main: PropTypes.string,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number\n};\n\nfunction mapStateToProps({ display }): DisplayProps {\n  let { main } = display;\n  return { main };\n}\n\nexport default connect(mapStateToProps)(Main);\n","// @flow\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { refreshDisplay } from \"../reducer\";\n\nimport { connect } from \"react-redux\";\n\nimport WebFont from \"webfontloader\";\n\ntype FontFixProps = {\n  font: string,\n  css: string,\n  refreshDisplay: () => void\n};\n\n// So the font doesn't load before the canvas renders unless cached, we\n// need to make sure the font loads before rendering the canvas.\nexport function FontFix(props: FontFixProps) {\n  const { css, font, refreshDisplay } = props;\n  const [initialized, setInitialized] = useState(false);\n\n  if (!initialized) {\n    WebFont.load({\n      active: () => {\n        refreshDisplay();\n      },\n      custom: {\n        families: [font],\n        urls: [css]\n      }\n    });\n\n    setInitialized(true);\n  }\n\n  return null;\n}\n\nFontFix.propTypes = {\n  font: PropTypes.string,\n  css: PropTypes.string\n};\n\nconst mapDispatchToProps = {\n  refreshDisplay\n};\n\nexport default connect(null, mapDispatchToProps)(FontFix);\n","/*\n * stdweb doesn't really have a good story/method for deploying es6 modules or\n * exporting rich JS objects; the only really good way to expose an object\n * with functions or callbacks is on the window... which isn't great.\n *\n * This is because stdweb doesn't have an \"export object\" macro, and the\n * only way that i've found to actually call javascript\n * callbacks is to create  JS object using the js!{} macro and then call that selfsame\n * object using the same macro... which means I need to be able to reference it from another scope,\n * which means it has to be on the window (for now).\n *\n * Parcel integration/support for modules is ongoing but there's still a lot of work\n * that needs to be done to make it worthwhile.\n *\n * Additionally, there might be something on the window always regardless;\n * the setup of RustyZ uses a JS callback for state updates and I'm not sure\n * if it will ever be technically feasible to call a javascript function from\n * WASM. (I have to look into this)\n *\n * export_js! exists but it requires that everything you return have a static lifetime or\n * be Copy - this means any callbacks you return must also be static, which means they\n * can't be part of structs, or refer to structs. it's good for static functions,\n * but can't be used to explose closures that contain objects with non-static lifetimes\n */\n\ndeclare var RustyZ;\nexport default window.RustyZ;\n","// @flow\nimport type { DisplaySlice } from \"../reducer\";\n\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { inputToDisplay, deleteLastCharacter } from \"../reducer\";\nimport { isDelete, isEnter, isText } from \"../common/utils\";\n\nimport RustyZ from \"../common/RustyZ\";\n\ntype KeyboardProps = {\n  inputToDisplay: string => void,\n  deleteLastCharacter: () => void,\n  inputting: boolean,\n  main: string\n};\n\nexport function KeyboardInput(props: KeyboardProps) {\n  let { inputToDisplay, deleteLastCharacter } = props;\n  let { update } = RustyZ;\n\n  let [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    let handleInput = (e: KeyboardEvent) => {\n      if (isDelete(e)) {\n        deleteLastCharacter();\n\n        if (input.length > 0) {\n          setInput(input.slice(0, -1));\n        }\n      } else if (isEnter(e)) {\n        inputToDisplay(\"\\n\");\n        update(input);\n\n        setInput(\"\");\n      } else if (isText(e)) {\n        inputToDisplay(e.key);\n\n        setInput(input + e.key);\n        return;\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleInput);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleInput);\n    };\n  });\n  return null;\n}\n\nKeyboardInput.propTypes = {};\n\nconst mapStateToProps = (state: DisplaySlice) => {\n  let {\n    display: { main, inputting }\n  } = state;\n  return { main, inputting };\n};\n\nconst mapDispatchToProps = {\n  inputToDisplay,\n  deleteLastCharacter\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KeyboardInput);\n","// @flow\n\nimport { useState } from \"react\";\nimport { Observable } from \"rxjs\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setLeftDisplay,\n  setRightDisplay,\n  addToMainDisplay,\n  focusInput\n} from \"../reducer\";\n\nimport RustyZ from \"../common/RustyZ\";\n\n// trying to deliberately do this without redux-observables\n\ntype ConnectorProps = {\n  setLeftDisplay: string => void,\n  setRightDisplay: string => void,\n  addToMainDisplay: string => void,\n  focusInput: () => void\n};\n\nexport function ZMachineConnector(props: ConnectorProps) {\n  const [initialized, setInitialized] = useState(false);\n  let { setLeftDisplay, setRightDisplay, addToMainDisplay, focusInput } = props;\n\n  // i'm pretty sure this is very similar to use effect, but i want to be sure\n  // that it's fired only once\n  if (!initialized) {\n    const observer = new Observable(subscriber => {\n      RustyZ.subscribe(output => {\n        subscriber.next(output);\n      });\n    });\n\n    observer.subscribe(x => {\n      switch (x.source) {\n        case \"left\":\n          setLeftDisplay(x.content);\n          break;\n        case \"right\":\n          setRightDisplay(x.content);\n          break;\n        case \"main\":\n          addToMainDisplay(x.content);\n          break;\n        case \"input\":\n          focusInput();\n          break;\n        default:\n          break;\n      }\n    });\n\n    setInitialized(true);\n  }\n\n  return null;\n}\n\nZMachineConnector.propTypes = {};\n\nconst mapDispatchToProps = {\n  setLeftDisplay,\n  setRightDisplay,\n  addToMainDisplay,\n  focusInput\n};\n\nexport default connect(null, mapDispatchToProps)(ZMachineConnector);\n","// @flow\nimport type {Dimensions, Rectangle} from './common/types';\n\nimport React from 'react';\nimport {Graphics, Stage, Sprite} from '@inlet/react-pixi';\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport {rootReducer} from './reducer';\n\nimport {\n  CRTFilterContainer,\n  Header,\n  Main,\n  ZMachineConnector,\n  KeyboardInput,\n  FontFix,\n} from './components';\nimport {drawScreen, useDimensions} from './common/utils';\nimport {DeadBlack, SeventiesBrown} from './common/styles';\n\n// unfortunately, firefox does not support SVGs on canvas\n// unless they have explicit w/h set in the meta-attributes\n//\n// additionally it renders exactly like a PNG, anyway.\n\nimport frame from './images/monitor.svg';\nimport lamp from './images/desklamp.svg';\nimport wood from './images/background.jpg';\n\nimport './fonts/commodore.woff';\nimport './App.css';\n\nconst store = createStore(rootReducer);\n\n// these are the units for the outer/inner height\n// based on the image, basically the smallest \"good\" display size\n// is used and then we roughly size the whole image (outer) and the\n// size of the display area (inner)\nconst INNER_WIDTH = 578.0;\nconst INNER_HEIGHT = 400.0;\n\nconst OUTER_WIDTH = 800.0;\nconst OUTER_HEIGHT = 800.0;\n\nconst TABLE_SIZE = 20.0;\n\nfunction getBackdropDimensions(size: Dimensions): Rectangle {\n  let {width, height: totalHeight} = size;\n  let {height: monitorHeight} = getFrameDimensions(size);\n\n  let x = 0,\n    y = 0;\n  let diff = (totalHeight - monitorHeight) / 2;\n  let height = monitorHeight + diff;\n\n  return {x, y, height, width};\n}\n\n// assumes you are giving it the crt frame dimensions\nfunction getCRTBlackDimensions(size: Dimensions): Rectangle {\n  let {width: frameWidth, height: frameHeight, x, y} = size;\n  const padding = 162;\n\n  let width = frameWidth + padding;\n  let height = frameHeight + padding;\n\n  x -= (width - frameWidth) / 2.0;\n  y -= (height - frameHeight) / 2.0;\n\n  return {width, height, x, y};\n}\n\nfunction getFrameDimensions(size: Dimensions): Rectangle {\n  let {width, height} = size;\n  let diff = Math.abs(width - height);\n\n  let x = 0,\n    y = 0;\n  if (width > height) {\n    x += diff / 2;\n  } else {\n    y += diff / 2;\n  }\n\n  width = height = Math.min(width, height);\n  return {width, height, x, y};\n}\n\nfunction getHeaderDimensions(size: Rectangle): Rectangle {\n  const {width, x, y} = size;\n\n  // 26px is the default text size,\n  //\n  // Unlike web browsers, games and graphics engines have a strict 1-1 relationship\n  // between \"text size\" and area taken by the font including top padding.\n  //\n  // In other words, game engines don't consider \"bottom padding\" to be part of the line.\n  //\n  // So web browsers: text size is size from baseline to topline of capital letters,\n  // this is what designers like.\n  //\n  // Games: text size is size from baseline to \"top of line\", including spacing,\n  // such that if there were another text line above it, it would be the distance\n  // between baselines. This is what developers like.\n\n  let font_size = 26;\n  let top_padding = 4;\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: font_size + top_padding,\n  };\n}\n\n// this is highly dependent on the image we are using and there's\n// no real way to autocalculate it; we scale based on expected aspect\n// ratio and image w/h\nfunction getInnerFrame(size): Rectangle {\n  let {width, height, x, y} = size;\n\n  // these values are pulled from the image utility used to create the frame\n  // we scale the offsets based on the ratio and pray its near exact (it usually is very close)\n  return {\n    x: 112 * (width / OUTER_WIDTH) + x,\n    y: 120 * (height / OUTER_HEIGHT) + y,\n    width: INNER_WIDTH * (width / OUTER_WIDTH),\n    height: INNER_HEIGHT * (height / OUTER_HEIGHT),\n  };\n}\n\nfunction getMainDimensions(size: Rectangle): Rectangle {\n  const {width, height, x, y} = size;\n\n  let {height: header_height} = getHeaderDimensions(size);\n\n  return {\n    x: x,\n    y: y + header_height,\n    height: height - header_height,\n    width: width,\n  };\n}\n\nfunction getLampDimensions(size: Rectangle, scale: number): Rectangle {\n  let {x, y, width, height: monitorHeight} = size;\n  x = 0;\n  let height = monitorHeight * scale;\n  y += monitorHeight - height;\n  width *= scale;\n\n  return {x, y, width, height};\n}\n\nfunction getStageOptions() {\n  return {\n    // PixiJS is kinda interesting, it doesn't\n    // take strings for color values, it only takes\n    // literal hex values. Probably the only time\n    // I've seen that in Js.\n    backgroundColor: 0x000000,\n  };\n}\n\nfunction getTableSize(background: Dimensions, view: Dimensions) {\n  let {width, height, y: offset} = background;\n\n  let y = offset + height;\n\n  return {\n    y,\n    x: 0,\n    height: TABLE_SIZE * (view.height / OUTER_HEIGHT),\n    width,\n  };\n}\n\nfunction App() {\n  const [size, resizing] = useDimensions();\n\n  // all of these are relative to the full size window\n  let frame_size = getFrameDimensions(size);\n  let backdrop_size = getBackdropDimensions(size);\n\n  // we calculate this from the backdrop, and the total size\n  let table_size = getTableSize(backdrop_size, size);\n\n  //  all of these are size relative to the monitor (frame size)\n  let lamp_size = getLampDimensions(frame_size, 0.6);\n  let inner_size = getInnerFrame(frame_size);\n\n  // these are sized relative to the \"actual\" game display (inner frame);\n  let crt_black_size = getCRTBlackDimensions(inner_size);\n  let {x, y, width, height} = getHeaderDimensions(inner_size);\n  const header = {x, y, width, height};\n\n  ({x, y, width, height} = getMainDimensions(inner_size));\n  const main = {x, y, width, height};\n\n  let stage_options = getStageOptions();\n\n  // Stage is strange in that it accepts an object\n  // in \"options\", but doesn't expose all of those props\n  // to the component (but as far as I'm aware, it could)\n  return resizing ? null : (\n    <Stage {...size} options={stage_options}>\n      <Provider store={store}>\n        <Sprite image={wood} anchor={(0, 0)} {...backdrop_size} />\n        <Graphics draw={g => drawScreen(g, DeadBlack, crt_black_size)} />\n        <Graphics draw={g => drawScreen(g, SeventiesBrown, table_size)} />\n        <CRTFilterContainer zIndex={1}>\n          <Header {...header}></Header>\n          <Main {...main}></Main>\n          <ZMachineConnector />\n          <KeyboardInput />\n          <FontFix css=\"./App.css\" font=\"Commodore\" />\n        </CRTFilterContainer>\n        <Sprite image={frame} anchor={(0, 0)} {...frame_size} />\n      </Provider>\n    </Stage>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootEle = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootEle);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}