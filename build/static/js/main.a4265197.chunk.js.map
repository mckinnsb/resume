{"version":3,"sources":["reducer.js","styles.js","Header.js","Main.js","RustyZ.js","ZMachineConnector.js","KeyboardInput.js","App.js","serviceWorker.js","index.js"],"names":["ADD_TO_MAIN_DISPLAY","DELETE_LAST_CHARACTER","INPUT_TO_DISPLAY","FOCUS_INPUT","SET_LEFT_DISPLAY","SET_RIGHT_DISPLAY","defaultState","main","left","right","inputting","inputting_at","rootReducer","combineReducers","display","state","action","type","add","payload","message","length","slice","BrightGreenText","TextStyle","fill","connect","props","size","x","y","height","width","leftDim","anchor","rightDim","getRightDimensions","text","style","MainText","clone","pos","getTextDimensions","wordWrap","wordWrapWidth","window","ZMachineConnector","useState","initialized","setInitialized","setLeftDisplay","setRightDisplay","addToMainDisplay","focusInput","Observable","subscriber","RustyZ","subscribe","output","next","source","content","propTypes","mapDispatchToProps","KeyboardInput","inputToDisplay","deleteLastCharacter","input","setInput","update","useEffect","handleInput","e","key","String","fromCharCode","keyCode","match","document","addEventListener","removeEventListener","store","createStore","useDimensions","innerWidth","innerHeight","getHeaderDimensions","parseInt","getHeight","CRTFilterContainer","withFilters","Container","CRTFilter","App","header","headerHeight","getMainDimensions","time","setTime","cb","requestAnimationFrame","draw","dt","cancelAnimationFrame","vignettingAlpha","noise","seed","animating","Boolean","location","hostname","rootEle","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4265197.chunk.js","sourcesContent":["// @flow\n\nimport {combineReducers} from 'redux';\nimport type {Action} from './types.js';\n\nexport const ADD_TO_MAIN_DISPLAY = 'DISPLAY.ADD_TO_MAIN_DISPLAY';\nexport const DELETE_LAST_CHARACTER = 'DISPLAY.DELETE_LAST_CHARACTER';\nexport const INPUT_TO_DISPLAY = 'DISPLAY.INPUT_TO_DISPLAY';\nexport const FOCUS_INPUT = 'DISPLAY.FOCUS_INPUT';\nexport const SET_LEFT_DISPLAY = 'DISPLAY.SET_LEFT_DISPLAY';\nexport const SET_RIGHT_DISPLAY = 'DISPLAY.SET_RIGHT_DISPLAY';\n\nexport type DisplayState = {\n  main: string,\n  left: string,\n  right: string,\n  inputting: boolean,\n  inputting_at: number,\n};\n\nexport type DisplaySlice = {\n  display: DisplayState,\n};\n\ntype DisplayUpdate = {\n  message: string,\n};\n\nexport function addToMainDisplay(main: string) {\n  return {\n    type: ADD_TO_MAIN_DISPLAY,\n    payload: {message: main},\n  };\n}\n\nexport function deleteLastCharacter() {\n  return {\n    type: DELETE_LAST_CHARACTER,\n    payload: {message: ''},\n  };\n}\n\nexport function inputToDisplay(input: string) {\n  return {\n    type: INPUT_TO_DISPLAY,\n    payload: {message: input},\n  };\n}\n\nexport function focusInput() {\n  return {\n    type: FOCUS_INPUT,\n    payload: {message: 'focus'},\n  };\n}\n\nexport function setLeftDisplay(left: string) {\n  return {\n    type: SET_LEFT_DISPLAY,\n    payload: {message: left},\n  };\n}\n\nexport function setRightDisplay(right: string) {\n  return {\n    type: SET_RIGHT_DISPLAY,\n    payload: {message: right},\n  };\n}\n\nconst defaultState: DisplayState = {\n  main: '',\n  left: 'Loading..',\n  right: '',\n  inputting: false,\n  inputting_at: 0,\n};\n\nexport function displayReducer(\n  state: DisplayState = defaultState,\n  action: Action<DisplayUpdate>,\n): DisplayState {\n  switch (action.type) {\n    case ADD_TO_MAIN_DISPLAY: {\n      let {message: add} = action.payload;\n      let {main} = state;\n      main += add;\n      return {...state, main, inputting: false};\n    }\n\n    case INPUT_TO_DISPLAY: {\n      let {message: add} = action.payload;\n      let {main} = state;\n      main += add;\n      return {...state, main};\n    }\n\n    case DELETE_LAST_CHARACTER: {\n      let {main, inputting_at} = state;\n\n      if (main.length > inputting_at) {\n        main = main.slice(0, -1);\n      }\n\n      return {...state, main};\n    }\n\n    case FOCUS_INPUT:\n      let {inputting} = state;\n\n      if (inputting) return state;\n\n      let inputting_at = state.main.length;\n      return {...state, inputting_at, inputting: true};\n\n    case SET_LEFT_DISPLAY:\n      let {message: left} = action.payload;\n      return {...state, left};\n\n    case SET_RIGHT_DISPLAY:\n      let {message: right} = action.payload;\n      return {...state, right};\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  display: displayReducer,\n});\n","import {TextStyle} from 'pixi.js';\n\nexport const BrightGreenText = new TextStyle({\n  fill: '#30ff5d',\n});\n\n","// @flow\nimport type {ObjectPosition, Rectangle} from './types.js';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {connect} from 'react-redux';\n\nimport {Container, Text} from '@inlet/react-pixi';\n\nimport {BrightGreenText} from './styles.js';\n\nfunction getLeftDimensions(size: Rectangle): ObjectPosition {\n  return {\n    x: 0,\n    y: 0,\n    anchor: [0, 0],\n  };\n}\n\nfunction getRightDimensions(size: Rectangle): ObjectPosition {\n  let {width} = size;\n\n  return {\n    x: width,\n    y: 0,\n    anchor: [1, 0],\n  };\n}\n\ntype DisplayProps = {\n  left?: string,\n  right?: string,\n};\n\ntype HeaderProps = Rectangle & DisplayProps;\n\nfunction Header(props: HeaderProps) {\n  const {left, right, x, y, height, width} = props;\n\n  let size = {x, y, height, width};\n\n  const leftDim = getLeftDimensions(size);\n  const rightDim = getRightDimensions(size);\n\n  return (\n    <Container {...size}>\n      <Text {...leftDim} text={left} style={BrightGreenText} />\n      <Text {...rightDim} text={right} style={BrightGreenText} />\n    </Container>\n  );\n}\n\nHeader.propTypes = {\n  left: PropTypes.string,\n  right: PropTypes.string,\n\n  height: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number,\n};\n\nfunction mapStateToProps({display}): DisplayProps {\n  let {left, right} = display;\n  return {left, right};\n}\n\nexport default connect(mapStateToProps)(Header);\n","// @flow\nimport type {ObjectPosition, Rectangle} from './types.js';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {connect} from 'react-redux';\nimport {Container, Text} from '@inlet/react-pixi';\n\nimport {BrightGreenText} from './styles.js';\n\n// main display, not main class\ntype MainProps = Rectangle & {\n  main?: string,\n};\n\nfunction getTextDimensions(size: Rectangle): ObjectPosition {\n  let {height} = size;\n\n  return {\n    x: 0,\n    y: height,\n    anchor: [0, 1],\n  };\n}\n\ntype DisplayProps = {\n  main?: string,\n};\n\nconst MainText = BrightGreenText.clone();\n\nexport function Main(props: MainProps) {\n  const {main, x, y, height, width} = props;\n  const size = {x, y, height, width};\n  const pos = getTextDimensions(size);\n\n  MainText.wordWrap = true;\n  MainText.wordWrapWidth = width;\n\n  return (\n    <Container {...size}>\n      <Text {...pos} style={MainText} text={main} />\n    </Container>\n  );\n}\n\nMain.propTypes = {\n  main: PropTypes.string,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number,\n};\n\nfunction mapStateToProps({display}): DisplayProps {\n  let {main} = display;\n  return {main};\n}\n\nexport default connect(mapStateToProps)(Main);\n","/*\n * stdweb doesn't really have a good story/method for deploying es6 modules or\n * exporting rich JS objects; the only really good way to expose an object\n * with functions or callbacks is on the window... which isn't great.\n *\n * This is because stdweb doesn't have an \"export object\" macro, and the\n * only way that i've found to actually call javascript\n * callbacks is to create  JS object using the js!{} macro and then call that selfsame\n * object using the same macro... which means I need to be able to reference it from another scope,\n * which means it has to be on the window (for now).\n *\n * Parcel integration/support for modules is ongoing but there's still a lot of work\n * that needs to be done to make it worthwhile.\n *\n * Additionally, there might be something on the window always regardless;\n * the setup of RustyZ uses a JS callback for state updates and I'm not sure\n * if it will ever be technically feasible to call a javascript function from\n * WASM. (I have to look into this)\n *\n * export_js! exists but it requires that everything you return have a static lifetime or\n * be Copy - this means any callbacks you return must also be static, which means they\n * can't be part of structs, or refer to structs. it's good for static functions,\n * but can't be used to explose closures that contain objects with non-static lifetimes\n */\n\ndeclare var RustyZ;\nexport default window.RustyZ;\n","// @flow\n\nimport {useState} from 'react';\nimport {Observable} from 'rxjs';\nimport {connect} from 'react-redux';\n\nimport {\n  setLeftDisplay,\n  setRightDisplay,\n  addToMainDisplay,\n  focusInput,\n} from './reducer.js';\n\nimport RustyZ from './RustyZ.js';\n\n// trying to deliberately do this without redux-observables\n\ntype ConnectorProps = {\n  setLeftDisplay: (string) => void,\n  setRightDisplay: (string) => void,\n  addToMainDisplay: (string) => void,\n  focusInput: () => void,\n}\n\nexport function ZMachineConnector(props: ConnectorProps) {\n  const [initialized, setInitialized] = useState(false);\n  let {setLeftDisplay, setRightDisplay, addToMainDisplay, focusInput} = props;\n\n  // i'm pretty sure this is very similar to use effect, but i want to be sure\n  // that it's fired only once\n  if (!initialized) {\n    const observer = new Observable(subscriber => {\n      RustyZ.subscribe(output => {\n        subscriber.next(output);\n      });\n    });\n\n    observer.subscribe(x => {\n      switch (x.source) {\n        case 'left': setLeftDisplay(x.content);\n          break;\n        case 'right': setRightDisplay(x.content);\n          break;\n        case 'main': addToMainDisplay(x.content);\n          break;\n        case 'input': focusInput();\n          break;\n        default: break;\n      }\n    });\n\n    setInitialized(true);\n  }\n\n  return null;\n}\n\nZMachineConnector.propTypes = {};\n\nconst mapDispatchToProps = {\n  setLeftDisplay,\n  setRightDisplay,\n  addToMainDisplay,\n  focusInput,\n};\n\nexport default connect(null, mapDispatchToProps)(ZMachineConnector);\n","// @flow\nimport type {DisplaySlice} from './reducer.js';\n\nimport {useEffect, useState} from 'react';\nimport {connect} from 'react-redux';\nimport {inputToDisplay, deleteLastCharacter} from './reducer.js';\n\nimport RustyZ from './RustyZ.js';\n\ntype KeyboardProps = {\n  inputToDisplay: string => void,\n  deleteLastCharacter: () => void,\n  inputting: boolean,\n  main: string,\n};\n\nexport function KeyboardInput(props: KeyboardProps) {\n  let {inputToDisplay, deleteLastCharacter} = props;\n\n  let [input, setInput] = useState('');\n\n  let {update} = RustyZ;\n\n  useEffect(() => {\n    let handleInput = (e: KeyboardEvent) => {\n      if (e.key === 'Backspace' || e.key === 'Delete') {\n        deleteLastCharacter();\n\n        if (input.length > 0) {\n          setInput(input.slice(0, -1));\n        }\n\n        return;\n      }\n\n      if (e.key === 'Enter') {\n        inputToDisplay('\\n');\n        update(input);\n        setInput('');\n        return;\n      }\n\n      // sometimes, stack overflow does have a very nice solution\n      // this matches the keycode against word/string characters\n      // and only outputs to string if it is a visible char\n      //\n      // we can't use \"key\" here because they are all strings,\n      // but we can get the literal string and match the escaped\n      // chars against a regex. that would have taken me a while to think\n      // of\n      if (String.fromCharCode(e.keyCode).match(/(\\w|\\s)/g)) {\n        inputToDisplay(e.key);\n        setInput(input + e.key);\n        return;\n      }\n    };\n\n    document.addEventListener('keydown', handleInput);\n\n    return () => {\n      document.removeEventListener('keydown', handleInput);\n    };\n  });\n  return null;\n}\n\nKeyboardInput.propTypes = {};\n\nconst mapStateToProps = (state: DisplaySlice) => {\n  let {\n    display: {main, inputting},\n  } = state;\n  return {main, inputting};\n};\n\nconst mapDispatchToProps = {\n  inputToDisplay,\n  deleteLastCharacter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KeyboardInput);\n","// @flow\nimport type {Dimensions, Rectangle} from './types.js';\n\nimport React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Container, Stage, withFilters} from '@inlet/react-pixi';\nimport {CRTFilter} from 'pixi-filters';\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport {rootReducer} from './reducer.js';\n\nimport Header from './Header.js';\nimport Main from './Main.js';\nimport ZMachineConnector from './ZMachineConnector.js';\nimport KeyboardInput from './KeyboardInput.js';\n\nconst store = createStore(rootReducer);\n\nfunction getDimensions(): Dimensions {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight,\n  };\n}\n\nfunction useDimensions() {\n  const [dimensions] = useState(getDimensions());\n\n  return dimensions;\n}\n\nfunction getHeaderDimensions(size): Rectangle {\n  const {width, height} = size;\n\n  const getHeight = height => {\n    return parseInt(height * 0.1, 10);\n  };\n\n  return {\n    x: 0,\n    y: 0,\n    width: width,\n    height: getHeight(height),\n  };\n}\n\nfunction getMainDimensions(size): Rectangle {\n  const {width, height} = size;\n\n  const getHeight = (height, headerHeight) => {\n    return height - headerHeight;\n  };\n\n  let {height: headerHeight} = getHeaderDimensions(size);\n\n  return {\n    x: 0,\n    y: headerHeight,\n    height: getHeight(height, headerHeight),\n    width: width,\n  };\n}\n\nconst CRTFilterContainer = withFilters(Container, [CRTFilter]);\n\nfunction App() {\n  const size = useDimensions();\n  let {x, y, width, height} = getHeaderDimensions(size);\n  const header = {x, y, width, height};\n\n  ({x, y, width, height} = getMainDimensions(size));\n  const main = {x, y, width, height};\n\n  let [time, setTime] = useState(0);\n\n  useEffect(() => {\n    let cb: number;\n\n    let draw = dt => {\n      setTime(dt);\n      cb = window.requestAnimationFrame(draw);\n    };\n\n    cb = window.requestAnimationFrame(draw);\n\n    return () => {\n      window.cancelAnimationFrame(cb);\n    };\n  });\n\n  return (\n    <Stage {...size}>\n      <Provider store={store}>\n        <CRTFilterContainer\n          vignettingAlpha={0.5}\n          noise={0.3}\n          seed={0.5}\n          time={time}\n          animating={true}>\n          <Header {...header}></Header>\n          <Main {...main}></Main>\n          <ZMachineConnector />\n          <KeyboardInput />\n        </CRTFilterContainer>\n      </Provider>\n    </Stage>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEle = document.getElementById('root');\n\nReactDOM.render(<App />, rootEle);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}