{"version":3,"sources":["images/monitor.svg","images/background.jpg","fonts/commodore.woff","reducer.js","common/utils.js","components/CRTContainer.js","common/styles.js","components/Header.js","components/Main.js","components/FontFix.js","common/RustyZ.js","components/KeyboardInput.js","components/ZMachineConnector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ADD_TO_MAIN_DISPLAY","DELETE_LAST_CHARACTER","INPUT_TO_DISPLAY","FOCUS_INPUT","SET_LEFT_DISPLAY","SET_RIGHT_DISPLAY","REFRESH_DISPLAY","defaultState","main","left","right","inputting","inputting_at","rootReducer","combineReducers","display","state","arguments","length","undefined","action","type","add","payload","message","Object","objectSpread2","slice","drawScreen","g","color","position","beginFill","x","y","width","height","drawRect","endFill","getDimensions","window","innerWidth","innerHeight","CRTFilterContainer","withFilters","Container","CRTFilter","CRTContainer","props","effects","time","vignettingAlpha","noise","noiseSize","seed","Math","random","lineWidth","lineContrast","animating","getCRTEffects","_useState5","useState","_useState6","slicedToArray","setTime","cb","useRef","useEffect","current","requestAnimationFrame","draw","_","t","cancelAnimationFrame","useFrameTime","react_default","a","createElement","assign","BrightGreen","BrightGreenText","TextStyle","fill","fontFamily","fontSize","isMobile","ScreenBlack","DeadBlack","SeventiesBrown","HeaderText","clone","connect","_ref","size","header_bar","leftDim","anchor","rightDim","getRightDimensions","react_pixi_module","drawTop","text","style","MainText","main_area","pos","getTextDimensions","mask","wordWrap","wordWrapWidth","ref","FontFix","css","font","refreshDisplay","_useState","_useState2","initialized","setInitialized","WebFont","load","active","custom","families","urls","propTypes","PropTypes","string","mapDispatchToProps","InputContainer","styled","input","_templateObject","inputToDisplay","deleteLastCharacter","_state$display","update","RustyZ","_React$useState","React","_React$useState2","setInput","handleInput","e","key","isDelete","isEnter","Boolean","String","fromCharCode","keyCode","match","isText","document","addEventListener","removeEventListener","inputEl","clickFn","setListeners","focus","ZMachineConnector","setLeftDisplay","setRightDisplay","addToMainDisplay","focusInput","Observable","subscriber","subscribe","output","next","source","content","store","createStore","INNER_WIDTH","INNER_HEIGHT","OUTER_WIDTH","OUTER_HEIGHT","TABLE_SIZE","Body","div","App_templateObject","getFrameDimensions","diff","abs","min","getHeaderDimensions","font_size","App","_useDimensions","dimensions","setDimensions","_useState3","_useState4","resizing","setResizing","debouncedResize","debounce","onResize","useDimensions","_useDimensions2","frame_size","backdrop_size","totalHeight","monitorHeight","getBackdropDimensions","table_size","background","view","getTableSize","inner_size","getInnerFrame","crt_black_size","frameWidth","frameHeight","padding","getCRTBlackDimensions","_getHeaderDimensions2","header","_getMainDimensions","header_height","getMainDimensions","stage_options","backgroundColor","options","es","image","wood","zIndex","components_Header","components_Main","components_ZMachineConnector","components_FontFix","frame","components_KeyboardInput","location","hostname","rootEle","getElementById","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70cc7d9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/monitor.a4573174.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.73745505.jpg\";","module.exports = __webpack_public_path__ + \"static/media/commodore.252e74d8.woff\";","// @flow\n\nimport { combineReducers } from \"redux\";\nimport type { Action } from \"./common/types\";\n\nexport const ADD_TO_MAIN_DISPLAY = \"DISPLAY.ADD_TO_MAIN_DISPLAY\";\nexport const DELETE_LAST_CHARACTER = \"DISPLAY.DELETE_LAST_CHARACTER\";\nexport const INPUT_TO_DISPLAY = \"DISPLAY.INPUT_TO_DISPLAY\";\nexport const FOCUS_INPUT = \"DISPLAY.FOCUS_INPUT\";\nexport const SET_LEFT_DISPLAY = \"DISPLAY.SET_LEFT_DISPLAY\";\nexport const SET_RIGHT_DISPLAY = \"DISPLAY.SET_RIGHT_DISPLAY\";\nexport const REFRESH_DISPLAY = \"DISPLAY.REFRESH\";\n\nexport type DisplayState = {\n  main: string,\n  left: string,\n  right: string,\n  inputting: boolean,\n  inputting_at: number\n};\n\nexport type DisplaySlice = {\n  display: DisplayState\n};\n\ntype DisplayUpdate = {\n  message: string\n};\n\nexport function addToMainDisplay(main: string) {\n  return {\n    type: ADD_TO_MAIN_DISPLAY,\n    payload: { message: main }\n  };\n}\n\nexport function deleteLastCharacter() {\n  return {\n    type: DELETE_LAST_CHARACTER,\n    payload: { message: \"\" }\n  };\n}\n\nexport function inputToDisplay(input: string) {\n  return {\n    type: INPUT_TO_DISPLAY,\n    payload: { message: input }\n  };\n}\n\nexport function focusInput() {\n  return {\n    type: FOCUS_INPUT,\n    payload: { message: \"focus\" }\n  };\n}\n\nexport function refreshDisplay() {\n  return {\n    type: REFRESH_DISPLAY,\n    payload: { message: \"refresh\" }\n  };\n}\n\nexport function setLeftDisplay(left: string) {\n  return {\n    type: SET_LEFT_DISPLAY,\n    payload: { message: left }\n  };\n}\n\nexport function setRightDisplay(right: string) {\n  return {\n    type: SET_RIGHT_DISPLAY,\n    payload: { message: right }\n  };\n}\n\nconst defaultState: DisplayState = {\n  main: \"\",\n  left: \"Loading..\",\n  right: \"\",\n  inputting: false,\n  inputting_at: 0\n};\n\nexport function displayReducer(\n  state: DisplayState = defaultState,\n  action: Action<DisplayUpdate>\n): DisplayState {\n  switch (action.type) {\n    case ADD_TO_MAIN_DISPLAY: {\n      let { message: add } = action.payload;\n      let { main } = state;\n      main += add;\n      return { ...state, main, inputting: false };\n    }\n\n    case INPUT_TO_DISPLAY: {\n      let { message: add } = action.payload;\n      let { main } = state;\n      main += add;\n      return { ...state, main };\n    }\n\n    case DELETE_LAST_CHARACTER: {\n      let { main, inputting_at } = state;\n\n      if (main.length > inputting_at) {\n        main = main.slice(0, -1);\n      }\n\n      return { ...state, main };\n    }\n\n    case FOCUS_INPUT:\n      let { inputting } = state;\n\n      if (inputting) return state;\n\n      let inputting_at = state.main.length;\n      return { ...state, inputting_at, inputting: true };\n\n    case REFRESH_DISPLAY: {\n      let { left, right, main } = state;\n\n      // this is kind of a hack, but basically\n      // pixi js will only make graphics calls when props\n      // change, there's no \"refresh\" call. if the draw\n      // call happens before the font is loaded,\n      // it will be blank, so refresh_display \"refreshes\"\n      // the display by adding characters where they wont\n      // be noticed - left of the left header, right of the right\n      // header, and at the beginning of the main input (since the\n      // text input is bottom anchored, the text will not shift)\n\n      left += \" \";\n      right = \" \" + right;\n      main = \" \" + main;\n\n      return { ...state, left, right, main };\n    }\n\n    case SET_LEFT_DISPLAY:\n      let { message: left } = action.payload;\n      return { ...state, left };\n\n    case SET_RIGHT_DISPLAY:\n      let { message: right } = action.payload;\n      return { ...state, right };\n\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  display: displayReducer\n});\n","// @flow\nimport type { Dimensions } from \"./types\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// import {useApp} from \"@inlet/react-pixi\";\nimport { debounce } from \"underscore\";\n\nexport function drawScreen(g, color, position: Rectangle) {\n  g.beginFill(color, 1);\n  let { x, y, width, height } = position;\n  g.drawRect(x, y, width, height);\n  g.endFill();\n}\n\nexport function getDimensions(): Dimensions {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\n\nexport function isDelete(e: KeyboardEvent) {\n  return e.key === \"Backspace\" || e.key === \"Delete\";\n}\n\nexport function isEnter(e: KeyboardEvent) {\n  return e.key === \"Enter\";\n}\n\nexport function isText(e: KeyboardEvent) {\n  return Boolean(String.fromCharCode(e.keyCode).match(/(\\w|\\s)/g));\n}\n\nexport function useDimensions(): [Dimensions, boolean] {\n  const [dimensions, setDimensions] = useState(getDimensions());\n  const [resizing, setResizing] = useState(false);\n\n  useEffect(() => {\n    let debouncedResize = () => {\n      let dimensions = getDimensions();\n      setDimensions(dimensions);\n      setResizing(false);\n    };\n\n    debouncedResize = debounce(debouncedResize, 250);\n    window.addEventListener(\"resize\", debouncedResize);\n\n    let onResize = () => {\n      setResizing(true);\n    };\n\n    window.addEventListener(\"resize\", onResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n      window.removeEventListener(\"resize\", debouncedResize);\n    };\n  }, []);\n\n  return [dimensions, resizing];\n}\n\nexport function useFrameTime() {\n  let [time, setTime] = useState(0);\n\n  let cb = useRef(0);\n\n  useEffect(() => {\n    let draw = _ => {\n      setTime(t => t + 1);\n      cb.current = window.requestAnimationFrame(draw);\n    };\n\n    cb.current = window.requestAnimationFrame(draw);\n\n    return () => {\n      window.cancelAnimationFrame(cb.current);\n    };\n  }, []);\n\n  return time;\n}\n","import React from \"react\";\nimport { Container, withFilters } from \"@inlet/react-pixi\";\nimport { CRTFilter } from \"pixi-filters\";\n\nimport { useFrameTime } from \"../common/utils\";\n\nfunction getCRTEffects(time: number) {\n  return {\n    vignettingAlpha: 0.4,\n    noise: 0.1,\n    noiseSize: 2.3,\n    seed: Math.random(),\n    time: time,\n    lineWidth: 6,\n    lineContrast: 0.03,\n    animating: true\n  };\n}\n\nconst CRTFilterContainer = withFilters(Container, [CRTFilter]);\n\nexport default function CRTContainer(props) {\n  let time = useFrameTime() / 2.71;\n  let effects = getCRTEffects(time);\n\n  return <CRTFilterContainer {...effects} {...props} />;\n}\n","import { TextStyle } from \"pixi.js\";\nimport { isMobile } from \"react-device-detect\";\n\nconst MOBILE_SIZE = 9;\nconst DESKTOP_SIZE = 24;\n\nexport const BrightGreen = 0x7c71da;\n\nexport const BrightGreenText = new TextStyle({\n  fill: BrightGreen,\n  fontFamily: \"Commodore\"\n});\n\nexport const fontSize = () => {\n  return isMobile ? MOBILE_SIZE : DESKTOP_SIZE;\n};\n\nexport const ScreenBlack = 0x3e32a2;\nexport const DeadBlack = 0x272727;\nexport const SeventiesBrown = 0x643e29;\n","// @flow\nimport type { ObjectPosition, Rectangle } from \"../common/types\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\n\nimport { Container, Graphics, Text } from \"@inlet/react-pixi\";\n\nimport { fontSize, BrightGreen, BrightGreenText } from \"../common/styles\";\n\nexport function getLeftDimensions(size: Rectangle): ObjectPosition {\n  return {\n    x: 0,\n    y: 0,\n    anchor: [0, 0]\n  };\n}\n\nexport function getRightDimensions(size: Rectangle): ObjectPosition {\n  let { width } = size;\n\n  return {\n    x: width,\n    y: 0,\n    anchor: [1, 0]\n  };\n}\n\ntype DisplayProps = {|\n  left?: string,\n  right?: string\n|};\n\ntype HeaderProps = Rectangle & DisplayProps;\nconst HeaderText = BrightGreenText.clone();\nHeaderText.fill = 0x000000;\n\n// \"g\" is the PIXI.Graphics object, which is kind of a light weight wrapper\n// around GL (hence clear/drawRect/beginFill) - i'm not going to type\n// it because that would be a nightmare\n//\n// as it turns out, one hitch I don't like about this library is that when\n// you ask TextStyle for colors, it will give you a hex string; the GL\n// API expects literal hex values only, hence why I'm using them and exporting\n// them directly\n\nfunction drawTop(g, color, position: Rectangle) {\n  g.beginFill(color, 1);\n  let { x, y, width, height } = position;\n  g.drawRect(x, y, width, height);\n  g.endFill();\n}\n\nfunction Header(props: HeaderProps) {\n  const { left, right, x, y, height, width } = props;\n\n  const size = { x, y, height, width };\n  const header_bar = { height, width };\n\n  const leftDim = getLeftDimensions(header_bar);\n  const rightDim = getRightDimensions(header_bar);\n  HeaderText.fontSize = fontSize();\n\n  return (\n    <Container {...size}>\n      <Graphics draw={g => drawTop(g, BrightGreen, header_bar)} />\n      <Text {...leftDim} text={left} style={HeaderText} />\n      <Text {...rightDim} text={right} style={HeaderText} />\n    </Container>\n  );\n}\n\nHeader.propTypes = {\n  left: PropTypes.string,\n  right: PropTypes.string,\n\n  height: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number\n};\n\nfunction mapStateToProps({ display }): DisplayProps {\n  let { left, right } = display;\n  return { left, right };\n}\n\nexport default connect(mapStateToProps)(Header);\n","// @flow\nimport type { ObjectPosition, Rectangle } from \"../common/types\";\n\nimport React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\nimport { Container, Graphics, Text } from \"@inlet/react-pixi\";\n\nimport { fontSize, ScreenBlack, BrightGreenText } from \"../common/styles\";\nimport { drawScreen } from \"../common/utils\";\n\n// main display, not main class\ntype MainProps = Rectangle & {\n  main?: string\n};\n\nexport function getTextDimensions(size: Rectangle): ObjectPosition {\n  let { height } = size;\n\n  return {\n    x: 0,\n    y: height,\n    anchor: [0, 1]\n  };\n}\n\ntype DisplayProps = {\n  main?: string\n};\n\nconst MainText = BrightGreenText.clone();\n\nexport function Main(props: MainProps) {\n  const { main, x, y, height, width } = props;\n  const size = { x, y, height, width };\n  const main_area = { height, width };\n\n  const pos = getTextDimensions(main_area);\n  const mask = useRef();\n\n  MainText.wordWrap = true;\n  MainText.wordWrapWidth = width;\n\n  MainText.fontSize = fontSize();\n\n  return (\n    <Container {...size}>\n      <Graphics draw={g => drawScreen(g, ScreenBlack, main_area)} />\n      <Graphics draw={g => drawScreen(g, ScreenBlack, main_area)} ref={mask} />\n      <Text {...pos} style={MainText} text={main} mask={mask.current} />\n    </Container>\n  );\n}\n\nMain.propTypes = {\n  main: PropTypes.string,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number\n};\n\nfunction mapStateToProps({ display }): DisplayProps {\n  let { main } = display;\n  return { main };\n}\n\nexport default connect(mapStateToProps)(Main);\n","// @flow\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { refreshDisplay } from \"../reducer\";\n\nimport { connect } from \"react-redux\";\n\nimport WebFont from \"webfontloader\";\n\ntype FontFixProps = {\n  font: string,\n  css: string,\n  refreshDisplay: () => void\n};\n\n// So the font doesn't load before the canvas renders unless cached, we\n// need to make sure the font loads before rendering the canvas.\nexport function FontFix(props: FontFixProps) {\n  const { css, font, refreshDisplay } = props;\n  const [initialized, setInitialized] = useState(false);\n\n  if (!initialized) {\n    WebFont.load({\n      active: () => {\n        refreshDisplay();\n      },\n      custom: {\n        families: [font],\n        urls: [css]\n      }\n    });\n\n    setInitialized(true);\n  }\n\n  return null;\n}\n\nFontFix.propTypes = {\n  font: PropTypes.string,\n  css: PropTypes.string\n};\n\nconst mapDispatchToProps = {\n  refreshDisplay\n};\n\nexport default connect(null, mapDispatchToProps)(FontFix);\n","/*\n * stdweb doesn't really have a good story/method for deploying es6 modules or\n * exporting rich JS objects; the only really good way to expose an object\n * with functions or callbacks is on the window... which isn't great.\n *\n * This is because stdweb doesn't have an \"export object\" macro, and the\n * only way that i've found to actually call javascript\n * callbacks is to create  JS object using the js!{} macro and then call that selfsame\n * object using the same macro... which means I need to be able to reference it from another scope,\n * which means it has to be on the window (for now).\n *\n * Parcel integration/support for modules is ongoing but there's still a lot of work\n * that needs to be done to make it worthwhile.\n *\n * Additionally, there might be something on the window always regardless;\n * the setup of RustyZ uses a JS callback for state updates and I'm not sure\n * if it will ever be technically feasible to call a javascript function from\n * WASM. (I have to look into this)\n *\n * export_js! exists but it requires that everything you return have a static lifetime or\n * be Copy - this means any callbacks you return must also be static, which means they\n * can't be part of structs, or refer to structs. it's good for static functions,\n * but can't be used to explose closures that contain objects with non-static lifetimes\n */\n\ndeclare var RustyZ;\nexport default window.RustyZ;\n","// @flow\nimport type {DisplaySlice} from '../reducer';\n\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport {isMobile} from 'react-device-detect';\nimport styled from 'styled-components';\nimport {inputToDisplay, deleteLastCharacter} from '../reducer';\nimport {isDelete, isEnter, isText} from '../common/utils';\n\nimport RustyZ from '../common/RustyZ';\n\ntype KeyboardProps = {\n  inputToDisplay: string => void,\n  deleteLastCharacter: () => void,\n  inputting: boolean,\n  main: string,\n};\n\nconst InputContainer = styled.input`\n  position: absolute;\n  display: block;\n  opacity: 0;\n  top: 0;\n  left: 0;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 5;\n`;\n\nexport function KeyboardInput(props: KeyboardProps) {\n  let {inputToDisplay, deleteLastCharacter} = props;\n  let {update} = RustyZ;\n\n  let [input, setInput] = React.useState('');\n\n  React.useEffect(() => {\n    let handleInput = (e: KeyboardEvent) => {\n      if (isDelete(e)) {\n        deleteLastCharacter();\n\n        if (input.length > 0) {\n          setInput(input.slice(0, -1));\n        }\n      } else if (isEnter(e)) {\n        inputToDisplay('\\n');\n        update(input);\n\n        setInput('');\n      } else if (isText(e)) {\n        inputToDisplay(e.key);\n\n        setInput(input + e.key);\n        return;\n      }\n    };\n\n    document.addEventListener('keydown', handleInput);\n\n    return () => {\n      document.removeEventListener('keydown', handleInput);\n    };\n  });\n\n  let inputEl = React.useRef(null);\n\n  React.useEffect(() => {\n    let clickFn;\n    let setListeners = isMobile && input.current !== null;\n\n    if (setListeners) {\n      clickFn = () => {\n        inputEl.current.focus();\n      };\n\n      document.addEventListener('click', clickFn);\n      document.addEventListener('touchend', clickFn);\n    }\n\n    return setListeners\n      ? () => {\n          document.removeEventListener('click', clickFn);\n          document.removeEventListener('touchend', clickFn);\n        }\n      : () => {};\n  });\n\n  return isMobile ? <InputContainer ref={inputEl} /> : null;\n}\n\nKeyboardInput.propTypes = {};\n\nconst mapStateToProps = (state: DisplaySlice) => {\n  let {\n    display: {main, inputting},\n  } = state;\n  return {main, inputting};\n};\n\nconst mapDispatchToProps = {\n  inputToDisplay,\n  deleteLastCharacter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KeyboardInput);\n","// @flow\n\nimport { useState } from \"react\";\nimport { Observable } from \"rxjs\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setLeftDisplay,\n  setRightDisplay,\n  addToMainDisplay,\n  focusInput\n} from \"../reducer\";\n\nimport RustyZ from \"../common/RustyZ\";\n\n// trying to deliberately do this without redux-observables\n\ntype ConnectorProps = {\n  setLeftDisplay: string => void,\n  setRightDisplay: string => void,\n  addToMainDisplay: string => void,\n  focusInput: () => void\n};\n\nexport function ZMachineConnector(props: ConnectorProps) {\n  const [initialized, setInitialized] = useState(false);\n  let { setLeftDisplay, setRightDisplay, addToMainDisplay, focusInput } = props;\n\n  // i'm pretty sure this is very similar to use effect, but i want to be sure\n  // that it's fired only once\n  if (!initialized) {\n    const observer = new Observable(subscriber => {\n      RustyZ.subscribe(output => {\n        subscriber.next(output);\n      });\n    });\n\n    observer.subscribe(x => {\n      switch (x.source) {\n        case \"left\":\n          setLeftDisplay(x.content);\n          break;\n        case \"right\":\n          setRightDisplay(x.content);\n          break;\n        case \"main\":\n          addToMainDisplay(x.content);\n          break;\n        case \"input\":\n          focusInput();\n          break;\n        default:\n          break;\n      }\n    });\n\n    setInitialized(true);\n  }\n\n  return null;\n}\n\nZMachineConnector.propTypes = {};\n\nconst mapDispatchToProps = {\n  setLeftDisplay,\n  setRightDisplay,\n  addToMainDisplay,\n  focusInput\n};\n\nexport default connect(null, mapDispatchToProps)(ZMachineConnector);\n","// @flow\nimport type {Dimensions, Rectangle} from './common/types';\n\nimport React from 'react';\nimport {Graphics, Stage, Sprite} from '@inlet/react-pixi';\n\nimport { isMobile } from \"react-device-detect\";\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport {rootReducer} from './reducer';\n\nimport {\n  CRTFilterContainer,\n  Header,\n  Main,\n  ZMachineConnector,\n  KeyboardInput,\n  FontFix,\n} from './components';\n\nimport styled from 'styled-components';\n\nimport {drawScreen, useDimensions} from './common/utils';\nimport {DeadBlack, SeventiesBrown} from './common/styles';\n\n// unfortunately, firefox does not support SVGs on canvas\n// unless they have explicit w/h set in the meta-attributes\n//\n// additionally it renders exactly like a PNG, anyway.\n\nimport frame from './images/monitor.svg';\n// import lamp from './images/desklamp.svg';\nimport wood from './images/background.jpg';\n\nimport './fonts/commodore.woff';\nimport './App.css';\n\nconst store = createStore(rootReducer);\n\n// these are the units for the outer/inner height\n// based on the image, basically the smallest \"good\" display size\n// is used and then we roughly size the whole image (outer) and the\n// size of the display area (inner)\nconst INNER_WIDTH = 578.0;\nconst INNER_HEIGHT = 400.0;\n\nconst OUTER_WIDTH = 800.0;\nconst OUTER_HEIGHT = 800.0;\n\nconst TABLE_SIZE = 20.0;\n\nconst Body = styled.div`\n  position: absolute;\n`;\n\nfunction getBackdropDimensions(size: Dimensions): Rectangle {\n  let {width, height: totalHeight} = size;\n  let {height: monitorHeight} = getFrameDimensions(size);\n\n  let x = 0,\n    y = 0;\n  let diff = (totalHeight - monitorHeight) / 2;\n  let height = monitorHeight + diff;\n\n  return {x, y, height, width};\n}\n\n// assumes you are giving it the crt frame dimensions\nfunction getCRTBlackDimensions(size: Dimensions): Rectangle {\n  let {width: frameWidth, height: frameHeight, x, y} = size;\n  const padding = isMobile ? 80 : 162;\n\n  let width = frameWidth + padding;\n  let height = frameHeight + padding;\n\n  x -= (width - frameWidth) / 2.0;\n  y -= (height - frameHeight) / 2.0;\n\n  return {width, height, x, y};\n}\n\nfunction getFrameDimensions(size: Dimensions): Rectangle {\n  let {width, height} = size;\n  let diff = Math.abs(width - height);\n\n  let x = 0,\n    y = 0;\n  if (width > height) {\n    x += diff / 2;\n  } else {\n    y += diff / 2;\n  }\n\n  width = height = Math.min(width, height);\n  return {width, height, x, y};\n}\n\nfunction getHeaderDimensions(size: Rectangle): Rectangle {\n  const {width, x, y} = size;\n\n  // 26px is the default text size,\n  //\n  // Unlike web browsers, games and graphics engines have a strict 1-1 relationship\n  // between \"text size\" and area taken by the font including top padding.\n  //\n  // In other words, game engines don't consider \"bottom padding\" to be part of the line.\n  //\n  // So web browsers: text size is size from baseline to topline of capital letters,\n  // this is what designers like.\n  //\n  // Games: text size is size from baseline to \"top of line\", including spacing,\n  // such that if there were another text line above it, it would be the distance\n  // between baselines. This is what developers like.\n\n  let font_size = 26;\n  let top_padding = 4;\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: font_size + top_padding,\n  };\n}\n\n// this is highly dependent on the image we are using and there's\n// no real way to autocalculate it; we scale based on expected aspect\n// ratio and image w/h\nfunction getInnerFrame(size): Rectangle {\n  let {width, height, x, y} = size;\n\n  // these values are pulled from the image utility used to create the frame\n  // we scale the offsets based on the ratio and pray its near exact (it usually is very close)\n  return {\n    x: 112 * (width / OUTER_WIDTH) + x,\n    y: 120 * (height / OUTER_HEIGHT) + y,\n    width: INNER_WIDTH * (width / OUTER_WIDTH),\n    height: INNER_HEIGHT * (height / OUTER_HEIGHT),\n  };\n}\n\nfunction getMainDimensions(size: Rectangle): Rectangle {\n  const {width, height, x, y} = size;\n\n  let {height: header_height} = getHeaderDimensions(size);\n\n  return {\n    x: x,\n    y: y + header_height,\n    height: height - header_height,\n    width: width,\n  };\n}\n\n/**\nfunction getLampDimensions(size: Rectangle, scale: number): Rectangle {\n  let {x, y, width, height: monitorHeight} = size;\n  x = 0;\n  let height = monitorHeight * scale;\n  y += monitorHeight - height;\n  width *= scale;\n\n  return {x, y, width, height};\n}\n**/\n\nfunction getStageOptions() {\n  return {\n    // PixiJS is kinda interesting, it doesn't\n    // take strings for color values, it only takes\n    // literal hex values. Probably the only time\n    // I've seen that in Js.\n    backgroundColor: 0x000000,\n  };\n}\n\nfunction getTableSize(background: Dimensions, view: Dimensions) {\n  let {width, height, y: offset} = background;\n\n  let y = offset + height;\n\n  return {\n    y,\n    x: 0,\n    height: TABLE_SIZE * (view.height / OUTER_HEIGHT),\n    width,\n  };\n}\n\nfunction App() {\n  const [size, resizing] = useDimensions();\n\n  // all of these are relative to the full size window\n  let frame_size = getFrameDimensions(size);\n  let backdrop_size = getBackdropDimensions(size);\n\n  // we calculate this from the backdrop, and the total size\n  let table_size = getTableSize(backdrop_size, size);\n\n  //  all of these are size relative to the monitor (frame size)\n  //  let lamp_size = getLampDimensions(frame_size, 0.6);\n  let inner_size = getInnerFrame(frame_size);\n\n  // these are sized relative to the \"actual\" game display (inner frame);\n  let crt_black_size = getCRTBlackDimensions(inner_size);\n  let {x, y, width, height} = getHeaderDimensions(inner_size);\n  const header = {x, y, width, height};\n\n  ({x, y, width, height} = getMainDimensions(inner_size));\n  const main = {x, y, width, height};\n\n  let stage_options = getStageOptions();\n\n  // Stage is strange in that it accepts an object\n  // in \"options\", but doesn't expose all of those props\n  // to the component (but as far as I'm aware, it could)\n  return resizing ? null : (\n    <Body>\n        <Stage {...size} options={stage_options}>\n          <Provider store={store}>\n            <Sprite image={wood} anchor={(0, 0)} {...backdrop_size} />\n            <Graphics draw={g => drawScreen(g, DeadBlack, crt_black_size)} />\n            <Graphics draw={g => drawScreen(g, SeventiesBrown, table_size)} />\n            <CRTFilterContainer zIndex={1}>\n              <Header {...header}></Header>\n              <Main {...main}></Main>\n              <ZMachineConnector />\n              <FontFix css=\"./App.css\" font=\"Commodore\" />\n            </CRTFilterContainer>\n            <Sprite image={frame} anchor={(0, 0)} {...frame_size} />\n          </Provider>\n        </Stage>\n        <Provider store={store}>\n          <KeyboardInput />\n        </Provider>\n    </Body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootEle = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootEle);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}